import "../docs/docs";
import { join } from "path";
import Refresh from "react-refresh/babel";

// More info:
// https://webpack.js.org/configuration/module/

/**
 * Defines a ruleset for bundling JS and TS code.
 * @param {"prod"|"dev"|"remote"|"undefined"} env The build environment.
 * @returns {RuleSetRule} Transpiler rules.
 */
function defineTranspiler(env) {
  let plugins = [Refresh];

  if (env === "prod") {
    plugins = [];
  }

  return {
    test: /\.(js|jsx|tsx|ts)$/,
    exclude: [/node_modules/, /build/, /public/],
    use: {
      loader: "babel-loader",
      options: {
        plugins: plugins.filter(Boolean),
      },
    },
  };
}

/**
 * Defines a RuleSetRule for bundling markup.
 * @returns {RuleSetRule} Markup bundling rules.
 */
function defineMarkup() {
  return {
    test: /\.html$/,
    use: [
      {
        loader: "html-loader",
        options: {
          minimize: false,
          esModule: true,
        },
      },
    ],
  };
}

/**
 * Defines a RuleSetRule for bundling moduled less stylesheets.
 * @param {"prod"|"dev"} env The build environment.
 * @returns {RuleSetRule} Moduled less bundling rules.
 */
function defineModuledLess(env) {
  console.log(env)
  return {
    test: /\.(less)$/,
    use: [
      env === "dev"
        ? { loader: "style-loader" }
        : { loader: "style-loader" },
      {
        loader: "@teamsupercell/typings-for-css-modules-loader",
        options: {
          banner: "// AUTOGENERATED TYPINGS, these should not be edited.",
          eol: "\n",
        },
      },
      { loader: "css-loader", options: { modules: true } },
      { loader: "less-loader" },
    ],
  };
}

/**
 * Defines a RuleSetRule for bundling global CSS.
 * @returns {RuleSetRule} Global CSS bundling rules.
 */
function defineGlobalCSS() {
  //  Handles any bits of third party CSS and whatever we define.
  /**@type RuleSetRule */
  return {
    test: /\.css$/,
    // exclude: [],
    use: [{ loader: "style-loader" }, { loader: "css-loader" }],
  };
}

/**
 * Defines a RuleSetRule for bundling images.
 * @returns {RuleSetRule} Image bundling rules.
 */
function defineImages() {
  return {
    test: /\.(png|jpg|gif|jpeg)$/,
    // include: [],
    use: [
      {
        loader: "file-loader",
        options: {
          name: "[name].[ext]",
          outputPath: "./resources/images/",
        },
      },
    ],
  };
}

/**
 * Defines a RuleSetRule for bundling icons.
 * @returns {RuleSetRule} Icon resources.
 */
function defineIcons() {
  return {
    test: /\.svg$/,
    use: [
      {
        loader: "@svgr/webpack",
        options: {
          native: false,
        },
      },
      { loader: "url-loader" },
    ],
  };
}

/**
 * Defines a RuleSetRule for bundling fonts.
 * @returns {RuleSetRule} Font resources.
 */
function defineFonts() {
  return {
    test: /.(ttf|otf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,
    // include: [],
    use: [
      {
        loader: "file-loader",
        options: {
          outputPath: "resources/fonts/",
          name: "[name].[ext]",
        },
      },
    ],
  };
}

/**
 * Creates a webpack.module.rules object for specific build environments.
 * @param {"prod"|"dev"|"remote"|"standaloneProd"} env
 * @returns {RuleSetRule[]} A env specific webpack module rule definition.
 */
export function defineModules(env) {
  const transpiler = defineTranspiler(env);
  const markup = defineMarkup();
  const globalCSS = defineGlobalCSS();
  const images = defineImages();
  const moduledLess = defineModuledLess(env);

  switch (env) {
    case "prod":
      return {
        rules: [transpiler, globalCSS, moduledLess, images],
      };
    case "standaloneProd":
      return {
        rules: [markup, transpiler, globalCSS, moduledLess, images],
      };
    default:
      return {
        rules: [markup, transpiler, globalCSS, moduledLess, images],
      };
  }
}

export { defineGlobalCSS, defineMarkup, defineTranspiler };
